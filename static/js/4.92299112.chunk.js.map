{"version":3,"sources":["pages/Home/StartGame.js","pages/Home/Round.js","pages/Home/Result.js","pages/Home/GameOver.js","pages/Home/Game.js","pages/Home/Home.js"],"names":["StartGame","_ref","gameRounds","stats","feeds","handleStartGame","handleRoundSetting","roundOptions","articleCount","reduce","count","feed","items","length","i","push","react_default","a","createElement","Form","onSubmit","Card","className","Body","Title","aria-label","Group","as","Row","controlId","classNames","Label","column","xs","span","offset","sm","lg","Col","Control","value","onChange","map","option","key","Button","type","variant","size","Round","_ref$article","article","title","content","handleRealButton","handleFakeButton","formattedArticle","replace","Fragment","dangerouslySetInnerHTML","__html","onClick","index_es","icon","faCheckCircle","faTimesCircle","Result","source","isReal","link","win","handleNextRound","resultVariant","concat","bg","border","href","target","rel","faExternalLink","faChevronCircleRight","GameOver","_ref$stats","score","accuracy","handleNewGame","accuracyPercent","Number","comment","faPlusCircle","Game","Stage","realPlay","stage","Home_StartGame","Home_Round","Home_Result","Home_GameOver","aria-live","defaultProps","undefined","parser","Parser","randomElement","array","Math","floor","random","randomArticle","_randomElement","_randomElement2","error","Home","setScore","setRound","setGameRounds","setLoading","setStage","playHandler","newGameHandler","setHandlePlay","setHandleNewGame","_useState","useState","_useState2","Object","slicedToArray","setFeeds","_useState3","_useState4","setArticle","_useState5","_useState6","setRealPlay","round","loading","fetchFeeds","_ref2","asyncToGenerator","regenerator_default","mark","_callee2","clear","wrap","_context2","prev","next","t0","t1","t2","toConsumableArray","t3","Promise","all","feedMetadata","_ref3","_callee","meta","_context","parseURL","rss","sent","abrupt","objectSpread","console","stop","_x2","apply","this","arguments","t4","t5","t6","call","_x","handlePlay","max","handlePlayParent","advanceRound","filter","_ref4","nextRound","_ref5","_callee3","_context3","handleNewGameParent","useEffect","Container","role","Helmet_default","xl","Loading","isLoading","pastDelay","Home_Game","event","preventDefault"],"mappings":"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","file":"static/js/4.92299112.chunk.js","sourcesContent":["import React from 'react';\nimport { arrayOf, shape, func } from 'prop-types';\nimport classNames from 'classnames';\nimport { Form, Row, Col, Card, Button } from 'react-bootstrap';\n\nconst StartGame = ({\n    stats: { gameRounds },\n    feeds,\n    handleStartGame,\n    handleRoundSetting\n}) => {\n    const roundOptions = [];\n    const articleCount = feeds.reduce(\n        (count, feed) => count + feed.items.length,\n        0\n    );\n    for (let i = 10; i <= articleCount; i += 10) roundOptions.push(i);\n    return (\n        <Form onSubmit={handleStartGame}>\n            <Card className=\"text-center\">\n                <Card.Body>\n                    <Card.Title aria-label=\"Article title\">\n                        <b>FAKE NOOZ</b>\n                    </Card.Title>\n                    Can you tell what&apos;s real news and what&apos;s fake\n                    news? Take a look at these articles and see how good you are\n                    at finding fact from fiction.\n                    <Form.Group\n                        as={Row}\n                        controlId=\"number-of-rounds-form\"\n                        className={classNames('mt-3', 'text-left')}\n                    >\n                        <Form.Label\n                            column\n                            xs={{ span: 6, offset: 1 }}\n                            sm={{ span: 5, offset: 2 }}\n                            lg={{ span: 4, offset: 3 }}\n                        >\n                            Number of Rounds\n                        </Form.Label>\n                        <Col xs={4} sm={3} lg={2}>\n                            <Form.Control\n                                as=\"select\"\n                                value={gameRounds}\n                                onChange={handleRoundSetting}\n                            >\n                                {roundOptions.map(option => (\n                                    <option key={option} value={option}>\n                                        {option}\n                                    </option>\n                                ))}\n                                <option value={articleCount}>\n                                    {articleCount} (Max)\n                                </option>\n                            </Form.Control>\n                        </Col>\n                    </Form.Group>\n                </Card.Body>\n            </Card>\n            <div\n                className={classNames(\n                    'd-flex',\n                    'justify-content-center',\n                    'mt-4'\n                )}\n            >\n                <Button type=\"submit\" variant=\"light\" size=\"lg\">\n                    Start\n                </Button>\n            </div>\n        </Form>\n    );\n};\n\nStartGame.propTypes = {\n    stats: shape({}).isRequired,\n    feeds: arrayOf(shape({})).isRequired,\n    handleStartGame: func.isRequired,\n    handleRoundSetting: func.isRequired\n};\n\nexport default StartGame;\n","import React from 'react';\nimport { func, shape } from 'prop-types';\nimport classNames from 'classnames';\nimport { Card, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheckCircle, faTimesCircle } from '@fortawesome/pro-solid-svg-icons';\n\nconst Round = ({\n    article: { title, content },\n    handleRealButton,\n    handleFakeButton\n}) => {\n    const formattedArticle = content\n        .replace(/<img[^>]*>/g, '') // Remove images\n        .replace(/<a[^>]*>.*<\\/a>/g, '') // Remove links\n        .replace(/<\\/?p[^>]*>/g, '') // Remove paragraphs\n        .replace(/<table[^>]*>.*<\\/table>/g, '') // Remove tables (Reddit)\n        .replace(/submitted by.*/g, '') // Remove submitted by (Reddit)\n        .replace(/<br[^>]*>.*/g, '') // Remove line breaks\n        .replace(\n            /\\s*makeamericathebest.com Your Trusted Source for Faux News\\./g,\n            ''\n        ); // Remove \"Make America The Best\" tagline\n    return (\n        <>\n            <h3 className={classNames('text-center', 'mb-4', 'mb-md-5')}>\n                Is it real or fake?\n            </h3>\n            <Card>\n                <Card.Body>\n                    <Card.Title aria-label=\"Article title\">{title}</Card.Title>\n                    {formattedArticle && formattedArticle !== '' ? (\n                        <article /* eslint-disable react/no-danger */\n                            dangerouslySetInnerHTML={{\n                                __html: formattedArticle\n                            }}\n                        />\n                    ) : (\n                        <span className=\"text-muted\">No feed content</span>\n                    )}\n                </Card.Body>\n            </Card>\n            <div\n                className={classNames(\n                    'd-flex',\n                    'align-items-center',\n                    'justify-content-center',\n                    'mt-4'\n                )}\n            >\n                <Button\n                    variant=\"success\"\n                    size=\"lg\"\n                    className=\"mr-3\"\n                    aria-label=\"It's real\"\n                    onClick={handleRealButton}\n                >\n                    <FontAwesomeIcon icon={faCheckCircle} className=\"mr-2\" />\n                    Real\n                </Button>\n                <Button\n                    variant=\"primary\"\n                    size=\"lg\"\n                    className=\"ml-3\"\n                    aria-label=\"It's fake\"\n                    onClick={handleFakeButton}\n                >\n                    <FontAwesomeIcon icon={faTimesCircle} className=\"mr-2\" />\n                    Fake\n                </Button>\n            </div>\n        </>\n    );\n};\n\nRound.propTypes = {\n    article: shape({}).isRequired,\n    handleRealButton: func.isRequired,\n    handleFakeButton: func.isRequired\n};\n\nexport default Round;\n","import React from 'react';\nimport { func, shape, bool } from 'prop-types';\nimport classNames from 'classnames';\nimport { Card, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n    faCheckCircle,\n    faTimesCircle,\n    faExternalLink,\n    faChevronCircleRight\n} from '@fortawesome/pro-solid-svg-icons';\n\nconst Result = ({\n    article: { source, isReal, title, link },\n    win,\n    handleNextRound\n}) => {\n    const resultVariant = win ? 'success' : 'primary';\n    return (\n        <>\n            <h3\n                className={classNames(\n                    'text-center',\n                    `text-${resultVariant}`,\n                    'mb-4',\n                    'mb-md-5'\n                )}\n            >\n                {win ? 'Correct!' : 'Incorrect'}\n            </h3>\n            <Card\n                bg={resultVariant}\n                border={resultVariant}\n                className=\"text-center\"\n            >\n                <Card.Body>\n                    <Card.Title>\n                        <FontAwesomeIcon\n                            icon={isReal ? faCheckCircle : faTimesCircle}\n                            className=\"mr-2\"\n                        />\n                        {isReal ? 'Real News' : 'Fake News'}\n                    </Card.Title>\n                    <h6>{source}</h6>\n                    <a\n                        href={link}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"text-white\"\n                    >\n                        {title}\n                        <FontAwesomeIcon\n                            icon={faExternalLink}\n                            className=\"ml-2\"\n                        />\n                    </a>\n                </Card.Body>\n            </Card>\n            <div\n                className={classNames(\n                    'd-flex',\n                    'justify-content-center',\n                    'mt-4'\n                )}\n            >\n                <Button variant=\"light\" size=\"lg\" onClick={handleNextRound}>\n                    <FontAwesomeIcon\n                        icon={faChevronCircleRight}\n                        className=\"mr-2\"\n                    />\n                    Next\n                </Button>\n            </div>\n        </>\n    );\n};\n\nResult.propTypes = {\n    article: shape({}).isRequired,\n    win: bool.isRequired,\n    handleNextRound: func.isRequired\n};\n\nexport default Result;\n","import React from 'react';\nimport { shape, oneOfType, number, string, func } from 'prop-types';\nimport classNames from 'classnames';\nimport { Card, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusCircle } from '@fortawesome/pro-solid-svg-icons';\n\nconst GameOver = ({\n    stats: { gameRounds, score, accuracy },\n    handleNewGame\n}) => {\n    const accuracyPercent = Number(accuracy.replace(/%/g, ''));\n    let comment = 'Was that your best shot?';\n    let resultVariant = 'dark';\n\n    if (accuracyPercent === 100) comment = 'Perfect!';\n    else if (accuracyPercent >= 90) comment = 'Almost Perfect';\n    else if (accuracyPercent >= 80) comment = 'Very Nice';\n    else if (accuracyPercent >= 70) comment = 'Good Job';\n    else if (accuracyPercent >= 60) comment = 'Not Bad';\n    else if (accuracyPercent >= 50) comment = \"It's the effort that counts.\";\n    else if (accuracyPercent >= 33) comment = 'Looks like you got fooled.';\n    else if (accuracyPercent >= 10) comment = 'Well… you tried.';\n\n    if (accuracyPercent >= 66) resultVariant = 'success';\n    else if (accuracyPercent <= 33) resultVariant = 'danger';\n\n    return (\n        <>\n            <h3 className={classNames('text-center', 'mb-4', 'mb-md-5')}>\n                Game Over\n            </h3>\n            <Card\n                bg={resultVariant}\n                border={resultVariant}\n                className=\"text-center\"\n            >\n                <Card.Body>\n                    <Card.Title aria-label=\"Article title\">\n                        {comment}\n                    </Card.Title>\n                    <div\n                        className={classNames(\n                            'text-center',\n                            'mx-auto',\n                            'd-flex',\n                            'align-items-center',\n                            'justify-content-center'\n                        )}\n                    >\n                        <h6>\n                            Rounds\n                            <br />\n                            <small>{gameRounds}</small>\n                        </h6>\n                        <h6 className=\"mx-2 mx-md-3\">\n                            Score\n                            <br />\n                            <small>{score}</small>\n                        </h6>\n                        <h6>\n                            Accuracy\n                            <br />\n                            <small>{accuracy}</small>\n                        </h6>\n                    </div>\n                </Card.Body>\n            </Card>\n            <div\n                className={classNames(\n                    'd-flex',\n                    'justify-content-center',\n                    'mt-4'\n                )}\n            >\n                <Button variant=\"light\" size=\"lg\" onClick={handleNewGame}>\n                    <FontAwesomeIcon icon={faPlusCircle} className=\"mr-2\" />\n                    New Game\n                </Button>\n            </div>\n        </>\n    );\n};\n\nGameOver.propTypes = {\n    stats: shape({\n        gameRounds: oneOfType([string, number]).isRequired,\n        score: number.isRequired,\n        accuracy: string.isRequired\n    }).isRequired,\n    handleNewGame: func.isRequired\n};\n\nexport default GameOver;\n","import React from 'react';\nimport { func, arrayOf, shape, bool } from 'prop-types';\nimport StartGame from './StartGame';\nimport Round from './Round';\nimport Result from './Result';\nimport GameOver from './GameOver';\n\nconst Game = ({\n    stats,\n    feeds,\n    article,\n    realPlay,\n    handleStartGame,\n    handleRoundSetting,\n    handleNextRound,\n    handleRealButton,\n    handleFakeButton,\n    handleNewGame\n}) => {\n    const win = article && article.isReal === realPlay;\n    let Stage;\n\n    switch (stats.stage) {\n        case 'start-game':\n            Stage = () => (\n                <StartGame\n                    stats={stats}\n                    feeds={feeds}\n                    handleStartGame={handleStartGame}\n                    handleRoundSetting={handleRoundSetting}\n                />\n            );\n            break;\n        case 'round':\n            Stage = () => (\n                <Round\n                    article={article}\n                    handleRealButton={handleRealButton}\n                    handleFakeButton={handleFakeButton}\n                />\n            );\n            break;\n        case 'result':\n            Stage = () => (\n                <Result\n                    article={article}\n                    win={win}\n                    handleNextRound={handleNextRound}\n                />\n            );\n            break;\n        case 'end-game':\n            Stage = () => (\n                <GameOver stats={stats} handleNewGame={handleNewGame} />\n            );\n            break;\n        default:\n            Stage = () => null;\n            break;\n    }\n\n    return (\n        <div className=\"py-4 py-md-5\" aria-live=\"polite\">\n            <Stage />\n        </div>\n    );\n};\n\nGame.propTypes = {\n    stats: shape({}).isRequired,\n    feeds: arrayOf(shape({})),\n    article: shape({}).isRequired,\n    realPlay: bool,\n    handleStartGame: func.isRequired,\n    handleRoundSetting: func.isRequired,\n    handleNextRound: func.isRequired,\n    handleRealButton: func.isRequired,\n    handleFakeButton: func.isRequired,\n    handleNewGame: func.isRequired\n};\n\nGame.defaultProps = {\n    feeds: undefined,\n    realPlay: undefined\n};\n\nexport default Game;\n","import React, { useState, useEffect } from 'react';\nimport { shape, oneOfType, string, number, func, bool } from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Parser from 'rss-parser';\nimport Loading from '../../components/Loading';\nimport Game from './Game';\nimport feedMetadata from '../../feedMetadata';\n\nconst parser = new Parser();\nconst CORS_PROXY = 'https://cors-anywhere.herokuapp.com/';\n\nconst randomElement = array =>\n    array ? array[Math.floor(Math.random() * array.length)] : null;\n\nconst randomArticle = feeds => {\n    try {\n        const { source, isReal, items } = randomElement(feeds);\n        const { title, content, link } = randomElement(items);\n        return {\n            source,\n            isReal,\n            title,\n            content,\n            link\n        };\n    } catch (error) {\n        return null;\n    }\n};\n\nconst Home = ({\n    stats,\n    setScore,\n    setRound,\n    setGameRounds,\n    setLoading,\n    setStage,\n    playHandler,\n    newGameHandler,\n    setHandlePlay,\n    setHandleNewGame\n}) => {\n    const [feeds, setFeeds] = useState([]);\n    const [article, setArticle] = useState();\n    const [realPlay, setRealPlay] = useState();\n    const { round, gameRounds, score, loading } = stats;\n\n    const fetchFeeds = async clear => {\n        setFeeds([\n            ...(clear ? [] : feeds),\n            ...(await Promise.all(\n                feedMetadata.map(async meta => {\n                    try {\n                        const feed = await parser.parseURL(\n                            CORS_PROXY + meta.rss\n                        );\n                        return { ...feed, ...meta };\n                    } catch (error) {\n                        console.error(error);\n                        return {};\n                    }\n                })\n            ))\n        ]);\n    };\n\n    const handlePlay = isReal => {\n        setScore(\n            article.isReal === isReal ? score + 1 : Math.max(score - 1, 0)\n        );\n        setRealPlay(isReal);\n        setStage('result');\n    };\n\n    const handlePlayParent = () => handlePlay;\n\n    const handleStartGame = event => {\n        event.preventDefault();\n        setStage('round');\n    };\n\n    const handleRoundSetting = event => setGameRounds(event.target.value);\n\n    const handleNextRound = advanceRound => {\n        if (round < gameRounds) {\n            if (advanceRound) setRound(round + 1);\n            setFeeds(\n                feeds.map(feed => ({\n                    items: feed.items.filter(\n                        ({ link }) => link !== article.link\n                    ),\n                    ...feed\n                }))\n            );\n            const nextRound = randomArticle(feeds);\n            if (nextRound) {\n                setArticle(nextRound);\n                setStage('round');\n            } else setStage('end-game');\n        } else setStage('end-game');\n    };\n\n    const handleNewGame = async () => {\n        setLoading(true);\n        await fetchFeeds(true);\n        handleNextRound(false);\n        setStage('start-game');\n        setRound(1);\n        setScore(0);\n        setLoading(false);\n    };\n\n    const handleNewGameParent = () => handleNewGame;\n\n    useEffect(() => {\n        if (!feeds.length) fetchFeeds();\n        else if (!article) setArticle(randomArticle(feeds));\n        else setLoading(false);\n        if (!playHandler) setHandlePlay(handlePlayParent);\n        if (!newGameHandler) setHandleNewGame(handleNewGameParent);\n    }, [feeds, article, playHandler, newGameHandler]);\n\n    return (\n        <Container role=\"main\">\n            <Helmet title=\"FAKE NOOZ\" />\n            <Row>\n                <Col\n                    sm={{ span: 10, offset: 1 }}\n                    lg={{ span: 8, offset: 2 }}\n                    xl={{ span: 6, offset: 3 }}\n                >\n                    {loading ? (\n                        <Loading isLoading pastDelay />\n                    ) : (\n                        <Game\n                            stats={stats}\n                            feeds={feeds}\n                            article={article}\n                            realPlay={realPlay}\n                            handleStartGame={handleStartGame}\n                            handleRoundSetting={handleRoundSetting}\n                            handleNextRound={handleNextRound}\n                            handleRealButton={() => handlePlay(true)}\n                            handleFakeButton={() => handlePlay(false)}\n                            handleNewGame={handleNewGame}\n                        />\n                    )}\n                </Col>\n            </Row>\n        </Container>\n    );\n};\n\nHome.propTypes = {\n    stats: shape({\n        round: number.isRequired,\n        gameRounds: oneOfType([string, number]).isRequired,\n        score: number.isRequired,\n        loading: bool.isRequired\n    }).isRequired,\n    setScore: func.isRequired,\n    setRound: func.isRequired,\n    setGameRounds: func.isRequired,\n    setLoading: func.isRequired,\n    setStage: func.isRequired,\n    playHandler: func,\n    newGameHandler: func,\n    setHandlePlay: func.isRequired,\n    setHandleNewGame: func.isRequired\n};\n\nHome.defaultProps = {\n    playHandler: undefined,\n    newGameHandler: undefined\n};\n\nexport default Home;\n"],"sourceRoot":""}